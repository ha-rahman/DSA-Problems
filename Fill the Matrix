//GFG -- Medium -- Oracle
//C++ Code Using Queue
//User function Template for C++

class Solution{   
public:
    int minIteration(int N, int M, int X, int Y){    
        // code here
        vector<vector<int>> grid(N+1, vector<int>(M+1, 0));
        grid[X][Y] = 1;
        queue<pair<int, int>> q;
        q.push({X, Y});
        int cnt = 0;
        while(!q.empty())
        {
            int sz = q.size();
            for(int i=0; i<sz; i++)
            {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                if(x > 1 && grid[x-1][y] == 0)
                {
                    q.push({x-1, y});
                    grid[x-1][y] = 1;
                }
                if(y > 1 && grid[x][y-1] == 0)
                {
                    q.push({x, y-1});
                    grid[x][y-1] = 1;
                }
                if(x < N && grid[x+1][y] == 0)
                {
                    q.push({x+1, y});
                    grid[x+1][y] = 1;
                }
                if(y < M && grid[x][y+1] == 0)
                {
                    q.push({x, y+1});
                    grid[x][y+1] = 1;
                }
            }
            if(!q.empty()) cnt++;
        }
        return cnt;
    }
};

// Most Optimized C++ Code
//User function Template for C++

class Solution{   
public:
    int minIteration(int N, int M, int X, int Y){    
        // code here
        if(N == 1 && M == 1) return 0;
        int ans = 0;
        int x = X-1;
        int y = Y-1;
        //top left
        ans = max(ans, x+y);
        //bottom left
        ans = max(ans, (N - (x + 1)) + y);
        //top right
        ans = max(ans, x + (M - (y + 1)));
        //bottom rogth
        ans = max(ans, (N - (x+1)) + (M - (y + 1)));
        return ans;
    }
};
