//Leetcode -- 2405 -- Medium
//C++ Code Below
class Solution {
public:
    int partitionString(string s) {
        vector<int> lastSeen(26, -1);
        int cnt = 1, subStringStart = 0;
        for(int i=0; i<s.size(); i++){
            if(lastSeen[s[i]-'a'] >= subStringStart){
                cnt++;
                subStringStart = i;
            }
            lastSeen[s[i] - 'a'] = i;
        }
        return cnt;
    }
};

//Java Code Below
class Solution {
    public int partitionString(String s) {
        int[] lastSeen = new int[26];
        Arrays.fill(lastSeen, -1);
        int cnt = 1, subStringStart = 0;
        for(int i=0; i<s.length(); i++){
            if(lastSeen[s.charAt(i) - 'a'] >= subStringStart){
                cnt++;
                subStringStart = i;
            }
            lastSeen[s.charAt(i)-'a'] = i;
        }
        return cnt;
    }
}

//Python3 Code Below
class Solution:
    def partitionString(self, s: str) -> int:
        lastSeen = [-1]*26
        cnt = 1
        subStringStart = 0
        for i in range(len(s)):
            if lastSeen[ord(s[i]) - ord('a')] >= subStringStart:
                cnt += 1
                subStringStart = i
            lastSeen[ord(s[i]) - ord('a')] = i
        return cnt
