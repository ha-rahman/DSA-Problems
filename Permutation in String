//Leetcode -- Medium -- 567
//C++ Code Below
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        vector<int>s1hash(26, 0);
        vector<int>s2hash(26, 0);
        int len1 = s1.size();
        int len2 = s2.size();
        if(len1>len2)
            return false;
        int left=0, right=0;
        while(right<len1)
        {
            s1hash[s1[right]-'a'] += 1;
            s2hash[s2[right]-'a'] += 1;
            right += 1;
        }
        right -= 1;
        while(right<len2)
        {
            if(s1hash==s2hash)
                return true;
            right += 1;
            if(right != len2)
                s2hash[s2[right]-'a'] += 1;
            s2hash[s2[left]-'a'] -= 1;
            left += 1;
        }
        return false;
    }
};

//Java Code Below
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int[] s1hash = new int[26];
        int[] s2hash = new int[26];
        int left = 0, right = 0;
        int len1 = s1.length(), len2 = s2.length();
        if(len1 > len2) return false;
        while(right < len1)
        {
            s1hash[s1.charAt(right)-'a'] += 1;
            s2hash[s2.charAt(right)-'a'] += 1;
            right++;
        }
        right--;
        while(right < len2)
        {
            if(Arrays.equals(s1hash, s2hash)) return true;
            right++;
            if(right < len2) s2hash[s2.charAt(right)-'a'] += 1;
            s2hash[s2.charAt(left)-'a'] -= 1;
            left++;
        }
        return false;
    }
}
