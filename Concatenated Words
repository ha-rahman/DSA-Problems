//LeetCode -- Hard -- 472
//C++ Code Below
class Solution {
public:
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        set<string> s(words.begin(), words.end());
        vector<string> ans;
        for(string word : words)
        {
            int len = word.size();
            vector<bool> dp(len+1);
            dp[0] = true;
            for(int i=1; i<=len; i++)
            {
                for(int j = (i==len ? 1 : 0); !dp[i] && j<i; j++)
                {
                    dp[i] = dp[j] && s.count(word.substr(j, i-j));
                }
            }
            if(dp[len]) ans.push_back(word);
        }
        return ans;
    }
};

//Java Code Below
class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        Set<String> s = new HashSet<>(Arrays.asList(words));
        List<String> ans = new ArrayList<>();
        for(String word : words)
        {
            int len = word.length();
            boolean[] dp = new boolean[len+1];
            dp[0] = true;
            for(int i=1; i<=len; i++)
            {
                for(int j= (i==len ? 1 : 0); !dp[i] && j<i; j++)
                {
                    dp[i] = dp[j] && s.contains(word.substring(j, i));
                }
            }
            if(dp[len]) ans.add(word);
        }
        return ans;
    }
}
