//Leetcode -- 2477
//C++ Code Below
class Solution {
public:
    long long fuel = 0;
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        int n = roads.size()+1;
        vector<vector<int>> adj(n);
        for(auto x : roads){
            adj[x[0]].push_back(x[1]);
            adj[x[1]].push_back(x[0]);
        }
        dfs(0, -1, adj, seats);
        return fuel;
    }
    long long dfs(int node, int parent, vector<vector<int>>&adj, int seats){
        int representatives = 1;
        for(auto child : adj[node]){
            if(child != parent) representatives += dfs(child, node, adj, seats);
        }
        if(node != 0) fuel += ceil(double(representatives)/seats);
        return representatives;
    }
};

//Java Code below
class Solution {
    long fuel = 0;
    public long minimumFuelCost(int[][] roads, int seats) {
        int n = roads.length;
        Map<Integer, List<Integer>> adj = new HashMap<>();
        for(int[] x : roads){
            adj.computeIfAbsent(x[0], k->new ArrayList<Integer>()).add(x[1]);
            adj.computeIfAbsent(x[1], k->new ArrayList<Integer>()).add(x[0]);
        }
        dfs(0, -1, adj, seats);
        return fuel;
    }
    long dfs(int node, int parent, Map<Integer, List<Integer>> adj, int seats){
        int representatives = 1;
        if(!adj.containsKey(node)) return representatives;
        for(int child : adj.get(node)){
            if(child != parent) representatives += dfs(child, node, adj, seats);
        }
        if(node != 0) fuel += Math.ceil((double)representatives/seats);
        return representatives;
    }
}
