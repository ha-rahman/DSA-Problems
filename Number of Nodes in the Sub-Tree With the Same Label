//Leetcode -- 1519 -- Medium
//C++ Code Below
class Solution {
public:
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        vector<vector<int>> adj(n);
        for(auto x : edges)
        {
            adj[x[0]].push_back(x[1]);
            adj[x[1]].push_back(x[0]);
        }
        vector<int> ans(n, 0);
        dfs(0, -1, adj, labels, ans);
        return ans;
    }
    vector<int> dfs(int node, int parent, vector<vector<int>>&adj, string &labels, vector<int>&ans)
    {
        vector<int> cnt(26);
        cnt[labels[node]-'a'] = 1;
        for(auto child : adj[node])
        {
            if(child == parent) continue;
            vector<int> childCnt = dfs(child, node, adj, labels, ans);
            for(int i=0; i<26; i++)
            {
                cnt[i] += childCnt[i];
            }
        }
        ans[node] = cnt[labels[node]-'a'];
        return cnt;
    }
};

//Java Code Below--
class Solution {
    public int[] countSubTrees(int n, int[][] edges, String labels) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        for(int[] x : edges)
        {
            int a = x[0], b = x[1];
            adj.computeIfAbsent(a, value -> new ArrayList<Integer>()).add(b);
            adj.computeIfAbsent(b, value -> new ArrayList<Integer>()).add(a);
        }
        int[] ans = new int[n];
        char[] label = labels.toCharArray();
        dfs(0, -1, adj, label, ans);
        return ans;
    }
    int[] dfs(int node, int parent, Map<Integer, List<Integer>> adj, char[] label, int[] ans)
    {
        int[] cnt = new int[26];
        cnt[label[node] - 'a'] = 1;
        if(!adj.containsKey(node)) return cnt;
        for(int child : adj.get(node))
        {
            if(child == parent) continue;
            int[] childCnt = dfs(child, node, adj, label, ans);
            for(int i=0; i<26; i++)
            {
                cnt[i] += childCnt[i];
            }
        }
        ans[node] = cnt[label[node] - 'a'];
        return cnt;
    }
}
