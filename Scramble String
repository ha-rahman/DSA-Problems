//Leetcode -- 87 -- Hard
//C++ Code below
class Solution {
public:
    unordered_map<string,bool> mp;
    bool isScramble(string s1, string s2) {
        int n = s1.size();
        if(s1==s2) return true;   
        if(n==1) return false;
        string key = s1+" "+s2;
        if(mp.find(key)!=mp.end()) return mp[key];
        for(int i=1;i<n;i++){
            if(isScramble(s1.substr(0,i),s2.substr(0,i)) && isScramble(s1.substr(i),s2.substr(i))){
                return mp[key] = true;
            }
            if(isScramble(s1.substr(0,i),s2.substr(n-i)) && isScramble(s1.substr(i),s2.substr(0,n-i))){
                return mp[key] = true;
            }
        }
        return mp[key] = false;
    }
};
//Java Code
class Solution {
    Map<String, Boolean> mp = new HashMap<>();
    public boolean isScramble(String s1, String s2) {
        int n = s1.length();
        if (s1.equals(s2)) return true;
        if (n == 1) return false;
        String key = s1 + " " + s2;
        if (mp.containsKey(key)) return mp.get(key);
        for (int i = 1; i < n; i++) {
            if (isScramble(s1.substring(0, i), s2.substring(0, i)) && isScramble(s1.substring(i), s2.substring(i))){
                mp.put(key, true);
                return true;
            }
            if (isScramble(s1.substring(0, i), s2.substring(n - i)) && isScramble(s1.substring(i), s2.substring(0, n - i))){
                mp.put(key, true);
                return true;
            }
        }
        mp.put(key, false);
        return false;
    }
}
//Python3 Code Below
class Solution:
    def __init__(self):
        self.mp = {}
    def isScramble(self, s1: str, s2: str) -> bool:
        n = len(s1)
        if s1 == s2:
            return True
        if n == 1:
            return False
        key = s1 + " " + s2
        if key in self.mp:
            return self.mp[key]
        for i in range(1, n):
            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):
                self.mp[key] = True
                return True
            if self.isScramble(s1[:i], s2[n - i:]) and self.isScramble(s1[i:], s2[:n - i]):
                self.mp[key] = True
                return True
        self.mp[key] = False
        return False
