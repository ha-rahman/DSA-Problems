//Leetcode -- 662 -- Medium
//C++ Code below
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root){
        if(!root) return 0;
        int ans = 0;
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        while(!q.empty()){
            int size = q.size();
            int min = q.front().second;
            int first, last;
            for(int i=0; i<size; i++){
                int curInd = q.front().second - min;
                TreeNode* node = q.front().first;
                q.pop();
                if(i == 0) first = curInd;
                if(i == size-1) last = curInd;
                if(node->left) q.push({node->left, 2LL*curInd+1});
                if(node->right) q.push({node->right, 2LL*curInd+2});
            }
            ans = max(ans, last-first+1);
        }
        return ans;
    }
};

//Java code below
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        int ans = 0;
        Queue<Pair<TreeNode, Integer>> q = new LinkedList<>();
        q.offer(new Pair(root, 0));
        while(!q.isEmpty()){
            int size = q.size();
            int min = q.peek().getValue();
            int first = 0, last = 0;
            for(int i=0; i<size; i++){
                int curInd = q.peek().getValue() - min;
                TreeNode node = q.peek().getKey();
                q.poll();
                if(i == 0) first = curInd;
                if(i == size-1) last = curInd;
                if(node.left != null) q.offer(new Pair(node.left, 2*curInd+1));
                if(node.right != null) q.offer(new Pair(node.right, 2*curInd+2));
            }
            ans = Math.max(ans, last-first+1);
        }
        return ans;
    }
}

//2nd one same with Pair class
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair{
    TreeNode first;
    int second;
    Pair(TreeNode _first, int _second){
        first = _first;
        second = _second;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        int ans = 0;
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(root, 0));
        while(!q.isEmpty()){
            int size = q.size();
            int min = q.peek().second;
            int first = 0, last = 0;
            for(int i=0; i<size; i++){
                int curInd = q.peek().second - min;
                TreeNode node = q.peek().first;
                q.poll();
                if(i == 0) first = curInd;
                if(i == size-1) last = curInd;
                if(node.left != null) q.offer(new Pair(node.left, 2*curInd+1));
                if(node.right != null) q.offer(new Pair(node.right, 2*curInd+2));
            }
            ans = Math.max(ans, last-first+1);
        }
        return ans;
    }
}
