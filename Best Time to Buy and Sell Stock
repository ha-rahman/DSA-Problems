//Leetcode -- Easy -- 121
//C++ Code below
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minimum = INT_MAX;
        int ans = 0;
        for(int i=0; i<prices.size(); i++){
            minimum = min(minimum, prices[i]);
            ans = max(ans, prices[i]-minimum);
        }
    return ans;
    }
};

//Java Code below
class Solution {
    public int maxProfit(int[] prices) {
        int ans = 0, mn = Integer.MAX_VALUE;
        for(int i=0; i<prices.length; i++)
        {
            mn = Math.min(mn, prices[i]);
            ans = Math.max(ans, prices[i]-mn);
        }
        return ans;
    }
}

//Python3 Code Below
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        ans, mn = 0, float('inf')
        for i in range(0, len(prices)):
            mn = min(mn, prices[i])
            ans = max(ans, prices[i]-mn)
        return ans
        
//Javascript Code below
/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    var ans = 0, mn = prices[0];
    for(let i=0; i<prices.length; i++){
        mn = Math.min(mn, prices[i]);
        ans = Math.max(ans, prices[i]-mn);
    }
    return ans;
};
