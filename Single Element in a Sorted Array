//Leetcode -- Medium -- 540
//C++ Code Below
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int l = 0, r = nums.size()-1;
        while(l < r)
        {
            int m = (l+r)/2;
            if(m %2) m--;
            if(nums[m] != nums[m+1]) r = m;
            else l = m+2;
        }
        return nums[l];
    }
};

//Java Code below
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l = 0, r = nums.length-1;
        while(l < r)
        {
            int m = (l+r)/2;
            if(m % 2 == 1) m--;
            if(nums[m] != nums[m+1]) r = m;
            else l = m+2;
        }
        return nums[l];
    }
}

//Pyhton3 code below
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l, r = 0, len(nums)-1
        while l < r:
            m = (l+r)//2
            if m%2 == 1: m -= 1
            if nums[m] != nums[m+1]: r = m
            else: l = m + 2
        return nums[l]
