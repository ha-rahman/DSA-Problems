//Leetcode -- 652 -- Medium
//C++ Code Below
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*> ans;
        map<string, int> mp;
        dfs(root, mp, ans);
        return ans;
    }
    string dfs(TreeNode* root, map<string, int> &mp, vector<TreeNode*> &ans)
    {
        if(root == NULL) return "";
        string str = to_string(root->val)+'#'+dfs(root->left, mp, ans)+'#'+dfs(root->right, mp, ans);
        if(++mp[str] == 2) ans.push_back(root);
        return str;
    }
};

//Java Code Below
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> ans = new ArrayList<>();
        Map<String, Integer> cnt = new HashMap<>();
        dfs(root, cnt, ans);
        return ans;
    }
    String dfs(TreeNode root, Map<String, Integer> cnt, List<TreeNode> ans)
    {
        if(root == null) return "";
        String str = root.val+'#'+dfs(root.left, cnt, ans)+'#'+dfs(root.right, cnt, ans);
        if(cnt.containsKey(str)) cnt.put(str, cnt.get(str)+1);
        else cnt.put(str, 1);
        if(cnt.get(str) == 2) ans.add(root);
        return str;
    }
}

//Python3 code below
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:
        ans = []
        cnt = collections.Counter()
        def dfs(root):
            if not root: return ""
            s = str(root.val)+'#'+dfs(root.left)+'#'+dfs(root.right)
            cnt[s] += 1
            if cnt[s] == 2: ans.append(root)
            return s
        dfs(root)
        return ans
