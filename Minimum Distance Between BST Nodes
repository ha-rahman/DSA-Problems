//Leetcode -- 783 -- Easy
//C++ Code Below
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> arr;
    int minDiffInBST(TreeNode* root) {
        inOrder(root);
        int ans = INT_MAX;
        for(int i=1; i<arr.size(); i++)
        {
            ans = min(ans, arr[i] - arr[i-1]);
        }
        return ans;
    }
    void inOrder(TreeNode *root)
    {
        if(root == NULL) return;
        inOrder(root->left);
        arr.push_back(root->val);
        inOrder(root->right);
    }
};

//Java Code Below
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> arr = new ArrayList<>();
    public int minDiffInBST(TreeNode root) {
        inOrder(root);
        int ans = Integer.MAX_VALUE;
        for(int i=1; i<arr.size(); i++)
        {
            ans = Math.min(ans, arr.get(i) - arr.get(i-1));
        }
        return ans;
    }
    void inOrder(TreeNode root)
    {
        if(root == null) return;
        inOrder(root.left);
        arr.add(root.val);
        inOrder(root.right);
    }
}

//Python3 Code
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minDiffInBST(self, root: Optional[TreeNode]) -> int:
        arr = []
        def inOrder(root):
            if root == None: return
            inOrder(root.left)
            arr.append(root.val)
            inOrder(root.right)
        inOrder(root)
        ans = float('inf')
        for i in range(1, len(arr)):
            ans = min(ans, arr[i]-arr[i-1])
        return ans
