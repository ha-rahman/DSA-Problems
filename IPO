//Leetcode -- 502 -- hard
//C++ code below
class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        int n = profits.size();
        vector<pair<int, int>> projects;
        for(int i=0; i<n; i++) projects.push_back({capital[i], profits[i]});
        sort(projects.begin(), projects.end());
        priority_queue<int> q;
        int ptr = 0;
        for(int i=0; i<k; i++){
            while(ptr < n && projects[ptr].first <= w){
                q.push(projects[ptr++].second);
            }
            if(q.empty()) break;
            w += q.top();
            q.pop();
        }
        return w;
    }
};

//Java Code belwo
class Solution {
    class Project implements Comparable<Project>{
        int capital, profit;
        public Project(int capital, int profit){
            this.capital = capital;
            this.profit = profit;
        }
        public int compareTo(Project project){
            return capital - project.capital;
        }
    }
    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {
        int n = profits.length;
        Project[] projects = new Project[n];
        for(int i=0; i<n; i++){
            projects[i] = new Project(capital[i], profits[i]);
        }
        Arrays.sort(projects);
        PriorityQueue<Integer> q = new PriorityQueue<Integer>(n, Collections.reverseOrder());
        int ptr = 0;
        for(int i=0;  i<k; i++){
            while(ptr<n && projects[ptr].capital <= w){
                q.add(projects[ptr++].profit);
            }
            if(q.isEmpty()) break;
            w += q.poll();
        }
        return w;
    }
}

//Python3 Code below
class Solution:
    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:
        n = len(profits)
        projects = list(zip(capital, profits))
        projects.sort()
        q = []
        ptr = 0
        for i in range(k):
            while ptr < n and projects[ptr][0] <= w:
                heappush(q, -projects[ptr][1])
                ptr += 1
            if not q: break
            w += -heappop(q)
        return w
