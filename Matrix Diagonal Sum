//Leetcode -- 1572 -- Easy
//C++ Code Below
class Solution {
public:
    int diagonalSum(vector<vector<int>>& mat) {
        int ans = 0, n = mat.size();
        for(int i=0; i<n; i++){
            ans += mat[i][i];
        }
        for(int i=0; i<n; i++){
            ans += mat[n-1-i][i];
        }
        if(n&1) ans -= mat[n/2][n/2];
        return ans;
    }
};

//C++ Code Using One For loop
class Solution {
public:
    int diagonalSum(vector<vector<int>>& mat) {
        int ans = 0, n = mat.size();
        for(int i=0; i<n; i++){
            ans += mat[i][i];
            ans += mat[n-1-i][i];
        }
        if(n&1) ans -= mat[n/2][n/2];
        return ans;
    }
};

//Java Code Below
class Solution {
    public int diagonalSum(int[][] mat) {
        int ans = 0, n = mat.length;
        for(int i=0; i<n; i++){
            ans += mat[i][i];
            ans += mat[n-1-i][i];
        }
        if((n&1) == 1) ans -= mat[n/2][n/2];
        return ans;
    }
}

//Python3 Code Below
class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        ans, n = 0, len(mat)
        for i in range(0, n):
            ans += mat[i][i]
            ans += mat[n-1-i][i]
        if n&1: ans -= mat[(n//2)][n//2]
        return ans
