//Leetcode -- 2246 -- Hard
//C++ Code
class Solution {
public:
    int longestPath(vector<int>& parent, string s) {
        int n = parent.size();
        vector<vector<int>> children(n);
        for(int i=1; i<n; i++)
        {
            children[parent[i]].push_back(i);
        }
        int ans = 1;
        dfs(0, children, s, ans);
        return ans;
    }
    int dfs(int curNode, vector<vector<int>> &children, string &s, int &ans)
    {
        int longestChain = 0, secondLongestChain = 0;
        for(int child : children[curNode])
        {
            int longestChainFromChild = dfs(child, children, s, ans);
            if(s[curNode] == s[child]) continue;
            if(longestChainFromChild > longestChain)
            {
                secondLongestChain = longestChain;
                longestChain = longestChainFromChild;
            }
            else if(longestChainFromChild > secondLongestChain)
            {
                secondLongestChain = longestChainFromChild;
            }
        }
        ans = max(ans, longestChain+secondLongestChain+1);
        return longestChain+1;
    }
};

//Java Code--
class Solution {
    int ans = 1;
    public int longestPath(int[] parent, String s) {
        int n = parent.length;
        Map<Integer, List<Integer>> children = new HashMap<>();
        for(int i=1; i<n; i++)
        {
            children.computeIfAbsent(parent[i], value -> new ArrayList<>()).add(i);
        }
        dfs(0, children, s);
        return ans;
    }
    int dfs(int curNode, Map<Integer, List<Integer>> children, String s)
    {
        if(!children.containsKey(curNode)) return 1;
        int longestChain = 0, secondLongestChain = 0;
        for(int child : children.get(curNode))
        {
            int longestChainFromChild = dfs(child, children, s);
            if(s.charAt(curNode) == s.charAt(child)) continue;
            if(longestChainFromChild > longestChain)
            {
                secondLongestChain = longestChain;
                longestChain = longestChainFromChild;
            }
            else if(longestChainFromChild > secondLongestChain)
            {
                secondLongestChain = longestChainFromChild;
            }
        }
        ans = Math.max(ans, longestChain + secondLongestChain + 1);
        return longestChain+1;
    }
}
