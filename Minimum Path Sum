//Leetcode -- Medium -- 64
//C++ Code Below
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        for(int i=1; i<n; i++) grid[i][0] += grid[i-1][0];
        for(int j=1; j<m; j++) grid[0][j] += grid[0][j-1];
        for(int i=1; i<n; i++){
            for(int j=1; j<m; j++){
                grid[i][j] += min(grid[i][j-1], grid[i-1][j]);
            }
        }
        return grid[n-1][m-1];
    }
};

//Java Code below
class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        for(int i=1; i<n; i++) grid[i][0] += grid[i-1][0];
        for(int j=1; j<m; j++) grid[0][j] += grid[0][j-1];
        for(int i=1; i<n; i++){
            for(int j=1; j<m; j++){
                grid[i][j] += Math.min(grid[i][j-1], grid[i-1][j]);
            }
        }
        return grid[n-1][m-1];
    }
}

//Python3 Code Below
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0]);
        for i in range(1, n): grid[i][0] += grid[i-1][0];
        for j in range(1, m): grid[0][j] += grid[0][j-1];
        for i in range(1, n):
            for j in range(1, m):
                grid[i][j] += min(grid[i][j-1], grid[i-1][j]);
        return grid[n-1][m-1];
