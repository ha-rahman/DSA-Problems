//GFG -- Medium
//C++ Code Below
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
	int maximumMatch(vector<vector<int>>&G){
	    // Code here
	    int n = G.size(), m = G[0].size();
	    vector<int> match(m, -1);
	    int ans = 0;
	    for(int i=0; i<n; i++){
	        vector<bool> used(m, false);
	        if(dfs(G, i, used, match)) ans++;
	    }
	    return ans;
	}
	bool dfs(vector<vector<int>>&G, int i, vector<bool>&used, vector<int>&match)
	{
	    for(int j=0; j<G[0].size(); j++){
	        if(G[i][j] == 1 && !used[j]){
	            used[j] = true;
	            if(match[j] == -1 || dfs(G, match[j], used, match)){
	                match[j] = i;
	                return true;
	            }
	        }
	    }
	    return false;
	}

};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int m, n;
		cin >> m >> n;
		vector<vector<int>>G(m, vector<int>(n, 0));
		for(int i = 0; i < m; i++){
			for(int j = 0; j < n; j++)
				cin >> G[i][j];
		}
		Solution obj;
		int ans = obj.maximumMatch(G);
		cout << ans << "\n";    
	}
	return 0;
}
// } Driver Code Ends
