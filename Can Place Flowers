//Leetcode -- Easy -- 605
//C++ Code Below
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        for(int i=0; i<flowerbed.size(); i++){
            if((flowerbed[i]==0) && (i==0 || flowerbed[i-1]==0) && (i==flowerbed.size()-1 || flowerbed[i+1]==0)){
                n--;
                flowerbed[i] = 1;
            }
        }
        return n<=0;
    }
};

//Java Code Below
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        for(int i=0; i<flowerbed.length; i++){
            if((flowerbed[i]==0) && (i==0 || flowerbed[i-1]==0) && (i==flowerbed.length-1 || flowerbed[i+1]==0)){
                n--;
                flowerbed[i] = 1;
            }
        }
        return n<=0;
    }
}

//Python3 Code Below
class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        for i in range(0, len(flowerbed)):
            if (flowerbed[i]==0) and (i==0 or flowerbed[i-1]==0) and (i==len(flowerbed)-1 or flowerbed[i+1]==0):
                n -= 1
                flowerbed[i] = 1
        return n<=0
