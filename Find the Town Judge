//Leetcode -- Easy -- 997
class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        if(n==1)
            return 1;
        vector<int> in(n+1), out(n+1);
        for(auto x : trust){
            in[x[1]]++;
            out[x[0]]++;
        }
        for(int i=1; i<=n; i++){
            if(in[i]==n-1 && out[i]==0)
                return i;
        }
        return -1;
    }
};
//2nd one
class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        vector<int> v(n+1);
        for(auto x : trust)
        {
            v[x[0]]--;
            v[x[1]]++;
        }
        for(int i=1; i<=n; i++)
        {
            if(v[i] == n-1) return i;
        }
        return -1;
    }
};

//Java Code Below
class Solution {
    public int findJudge(int n, int[][] trust) {
        int[] in = new int[n+1];
        int[] out = new int[n+1];
        for(int[] x : trust)
        {
            in[x[1]]++;
            out[x[0]]++;
        }
        for(int i=1; i<=n; i++)
        {
            if(in[i] == n-1 && out[i] == 0) return i;
        }
        return -1;
    }
}
//2nd Code
class Solution {
    public int findJudge(int n, int[][] trust) {
        int[] v = new int[n+1];
        for(int[] x : trust)
        {
            v[x[0]]--;
            v[x[1]]++;
        }
        for(int i=1; i<=n; i++)
        {
            if(v[i] == n-1) return i;
        }
        return -1;
    }
}
