//Leetcode -- 1456 -- Medium
//C++ Code Below
class Solution {
public:
    int maxVowels(string s, int k) {
        unordered_set<char> vowels{'a', 'e', 'i', 'o', 'u'};
        int cnt = 0;
        for(int i=0; i<k; i++){
            cnt += vowels.count(s[i]);
        }
        int ans = cnt;
        for(int i=k; i<s.size(); i++){
            cnt += vowels.count(s[i]) - vowels.count(s[i-k]);
            ans = max(ans, cnt);
        }
        return ans;
    }
};

//Java code below
class Solution {
    public int maxVowels(String s, int k) {
        Set<Character> vowels = Set.of('a', 'e', 'i', 'o', 'u');
        int cnt = 0;
        for(int i=0; i<k; i++){
            cnt += (vowels.contains(s.charAt(i))) ? 1 : 0;
        }
        int ans = cnt;
        for(int i=k; i<s.length(); i++){
            cnt += (vowels.contains(s.charAt(i))) ? 1 : 0;
            cnt -= (vowels.contains(s.charAt(i-k))) ? 1 : 0;
            ans = Math.max(ans, cnt);
        }
        return ans;
    }
}

//Python3 code below
class Solution:
    def maxVowels(self, s: str, k: int) -> int:
        vowels = {'a', 'e', 'i', 'o', 'u'}
        cnt = 0
        for i in range(0, k):
            cnt += int(s[i] in vowels)
        ans = cnt
        for i in range(k, len(s)):
            cnt += int(s[i] in vowels)
            cnt -= int(s[i-k] in vowels)
            ans = max(ans, cnt)
        return ans
