//GFG -- Medium
//C++ Code Below
#include <bits/stdc++.h>
using namespace std;
class Solution
{
public:
    vector<int> nearestSmallerTower(vector<int> arr)
    {
        // code here
        int n = arr.size();
        vector<int> ans(n, -1);
        vector<int> left(n, -1);
        vector<int> right(n, -1);
        stack<int> s;
        for(int i=0; i<n; i++){
            while(!s.empty() && arr[s.top()]>=arr[i]) s.pop();
            if(!s.empty()) left[i] = s.top();
            s.push(i);
        }
        while(!s.empty()) s.pop();
        for(int i=n-1; i>=0; i--){
            while(!s.empty() && arr[s.top()]>=arr[i]) s.pop();
            if(!s.empty()) right[i] = s.top();
            s.push(i);
        }
        for(int i=0; i<n; i++){
            if(left[i] == -1) ans[i] = right[i];
            else if(right[i] == -1) ans[i] = left[i];
            else{
                if(abs(left[i]-i) > abs(right[i]-i)) ans[i] = right[i];
                else if(abs(left[i]-i) < abs(right[i]-i)) ans[i] = left[i];
                else{
                    if(arr[left[i]] == arr[right[i]]) ans[i] = min(left[i], right[i]);
                    else if(arr[left[i]] > arr[right[i]]) ans[i] = right[i];
                    else ans[i] = left[i];
                }
            }
        }
        return ans;
    }
};
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;
        vector<int> v(n);
        for (int i = 0; i < n; i++)
        {
            cin >> v[i];
        }
        Solution ob;
        vector<int> ans = ob.nearestSmallerTower(v);
        for (int i = 0; i < n; i++)
        {
            cout << ans[i] << " ";
        }
        cout << "\n";
    }
    return 0;
}
