//Leetcode -- Medium -- 1319
//DFS Approach
//C++ Code Below
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1) return -1;
        vector<vector<int>> adj(n);
        for(auto edge : connections){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        vector<int> vis(n, 0);
        int components = 0;
        for(int i=0; i<n; i++){
            if(vis[i] == 0){
                dfs(adj, vis, i);
                components++;
            }
        }
        return components-1;
    }
    void dfs(vector<vector<int>> &adj, vector<int> &vis, int node){
        vis[node] = 1;
        for(int x : adj[node]){
            if(vis[x] == 0) dfs(adj, vis, x);
        }
    }
};

//Java Code below
class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length < n-1) return -1;
        List<Integer>[] adj = new List[n];
        for(int i=0; i<n; i++) adj[i] = new ArrayList<>();
        for(int[] edge : connections){
            adj[edge[0]].add(edge[1]);
            adj[edge[1]].add(edge[0]);
        }
        int components = 0;
        boolean[] vis = new boolean[n];
        for(int i=0; i<n; i++){
            components += dfs(adj, vis, i);
        }
        return components-1;
    }
    int dfs(List<Integer>[] adj, boolean[] vis, int node){
        if(vis[node]) return 0;
        vis[node] = true;
        for(int x : adj[node]){
            dfs(adj, vis, x);
        }
        return 1;
    }
}

//Python3 Code Below
class Solution:
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        if len(connections) < n-1: return -1
        adj = [set() for i in range(n)]
        for u, v in connections:
            adj[u].add(v)
            adj[v].add(u)
        vis = [0] * n
        def dfs(node):
            if vis[node]: return 0
            vis[node] = 1
            for x in adj[node]: dfs(x)
            return 1
        return sum(dfs(node) for node in range(n)) - 1
