//Leetcode -- 57 -- Medium
//C++ Code
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        int n = intervals.size(), i = 0;
        vector<vector<int>> ans;
        while(i<n && newInterval[0] > intervals[i][1])
        {
            ans.push_back(intervals[i]);
            i++;
        }
        while(i<n && newInterval[1] >= intervals[i][0])
        {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            i++;
        }
        ans.push_back(newInterval);
        while(i<n)
        {
            ans.push_back(intervals[i]);
            i++;
        }
        return ans;
    }
};
//C++ 2nd and Easy One--
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> ans;
        int n = intervals.size();
        for(int i=0; i<n; i++)
        {
            if(newInterval[0] > intervals[i][1])
            {
                ans.push_back(intervals[i]);
            }
            else if(newInterval[1] < intervals[i][0])
            {
                ans.push_back(newInterval);
                newInterval = intervals[i];
            }
            else if(newInterval[0] <= intervals[i][1] || newInterval[1] >= intervals[i][0])
            {
                newInterval[0] = min(newInterval[0], intervals[i][0]);
                newInterval[1] = max(newInterval[1], intervals[i][1]);
            }
        }
        ans.push_back(newInterval);
        return ans;
    }
};

//Java Code Below--
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> ans = new ArrayList<>();
        int n = intervals.length;
        for(int i=0; i<n; i++)
        {
            if(newInterval[0] > intervals[i][1])
            {
                ans.add(intervals[i]);
            }
            else if(newInterval[1] < intervals[i][0])
            {
                ans.add(newInterval);
                newInterval = intervals[i];
            }
            else if(newInterval[0] <= intervals[i][1] || newInterval[1] >= intervals[i][0])
            {
                newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
                newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
            }
        }
        ans.add(newInterval);
        return ans.toArray(new int[ans.size()][]);
    }
}

//Python3 Code Below--
class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        ans = []
        for i in range(len(intervals)):
            if newInterval[0] > intervals[i][1]:
                ans.append(intervals[i])
            elif newInterval[1] < intervals[i][0]:
                ans.append(newInterval)
                newInterval = intervals[i]
            elif newInterval[0] <= intervals[i][1] or newInterval[1] >= intervals[i][0]:
                newInterval[0] = min(newInterval[0], intervals[i][0])
                newInterval[1] = max(newInterval[1], intervals[i][1])
        ans.append(newInterval)
        return ans
