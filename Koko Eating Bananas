//Leetcode -- Medium -- 875
//C++ Code below
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int l = 1, r = *max_element(piles.begin(), piles.end());
        while(l <= r){
            int m = (l+r)/2;
            if(canEatAll(piles, m, h)){
                r = m-1;
            }
            else l = m+1;
        }
        return l;
    }
    bool canEatAll(vector<int>&piles, int k, int h){
        long hours = 0;
        for(int x : piles){
            long div = x/k;
            hours += div;
            if(x%k != 0) hours++;
        }
        return hours<=h;
    }
};

//Java code below
class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int l = 1, r = Arrays.stream(piles).max().getAsInt();
        while(l <= r){
            int m = (l+r)/2;
            if(canEatAll(piles, m, h)) r = m-1;
            else l = m+1;
        }
        return l;
    }
    boolean canEatAll(int[] piles, int k, int h){
        long hours = 0;
        for(int x : piles){
            hours += (x/k);
            if(x%k != 0) hours++;
        }
        return hours<=h;
    }
}

//Python3 Code Below
class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        l, r = 1, max(piles)
        while l<=r:
            m = (l+r)//2
            if self.canEatAll(piles, m, h): r = m-1
            else: l = m+1
        return l
    def canEatAll(self, piles, k, h):
        hours = 0
        for x in piles:
            hours += (x//k)
            if x%k: hours += 1
        return hours<=h
