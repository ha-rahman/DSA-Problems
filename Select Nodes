//GFG -- Hard -- Flipkart
//C++ Code Below--
#include<bits/stdc++.h> 
using namespace std; 
class Solution{
  public:
    int ans = 0;
    int countVertex(int N, vector<vector<int>>edges){
        // code here
        vector<int> adj[N];
        for(int i=0; i<edges.size(); i++)
        {
            int a = edges[i][0];
            int b = edges[i][1];
            adj[a - 1].push_back(b-1);
            adj[b - 1].push_back(a-1);
        }
        bool x = dfs(adj, 0, -1, N);
        return ans;
    }
    bool dfs(vector<int> adj[], int node, int parent, int n)
    {
        bool check = false;
        for(int i=0; i<adj[node].size(); i++)
        {
            if(adj[node][i] != parent)
            {
                bool y = dfs(adj, adj[node][i], node, n);
                if(y == false)
                {
                    check = true;
                }
            }
        }
        if(check) ans++;
        return check;
    }
};
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N;
        cin >> N;
        vector<vector<int>>edges;
        for(int i = 0; i < N-1; i++){
            int x,y;
            cin >> x >> y;
            vector<int> edge;
            edge.push_back(x);
            edge.push_back(y);
            edges.push_back(edge);
        }
        
        Solution ob;
        cout << ob.countVertex(N, edges) << endl;
    }
    return 0; 
} 
