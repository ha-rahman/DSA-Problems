//Leetcode --2444 -- Hard

//C++ code below
class Solution {
public:
    long long countSubarrays(vector<int>& nums, int minK, int maxK) {
        int leftBound = -1, lastMin = -1, lastMax = -1;
        long long cnt = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] >= minK && nums[i] <= maxK){
                lastMin = (nums[i] == minK) ? i : lastMin;
                lastMax = (nums[i] == maxK) ? i : lastMax;
                cnt += max(0, min(lastMin, lastMax) - leftBound);
            }
            else{
                leftBound = i;
                lastMin = -1;
                lastMax = -1;
            }
        }
        return cnt;
    }
};

//Java Code Below
class Solution {
    public long countSubarrays(int[] nums, int minK, int maxK) {
        int leftBound = -1, lastMin = -1, lastMax = -1;
        long cnt = 0;
        for(int i=0; i<nums.length; i++){
            if(nums[i]>=minK && nums[i]<=maxK){
                lastMin = (nums[i] == minK) ? i : lastMin;
                lastMax = (nums[i] == maxK) ? i : lastMax;
                cnt += Math.max(0, Math.min(lastMin, lastMax)-leftBound);
            }
            else{
                leftBound = i;
                lastMin = -1;
                lastMax = -1;
            }
        }
        return cnt;
    }
}

//Python3 Code Below
class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        leftBound, lastMin, lastMax = -1, -1, -1
        cnt = 0
        for i in range(0, len(nums)):
            if nums[i] >= minK and nums[i] <= maxK:
                lastMin = i if nums[i] == minK else lastMin
                lastMax = i if nums[i] == maxK else lastMax
                cnt += max(0, min(lastMin, lastMax)-leftBound)
            else:
                leftBound = i
                lastMin = -1
                lastMax = -1
        return cnt
