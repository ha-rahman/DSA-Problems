//GFG -- Medium
//C++ Code Below
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000
struct Node {
    int data;
    Node *right;
    Node *left;

    Node(int x) {
        data = x;
        right = NULL;
        left = NULL;
    }
};
Node *insert(Node *tree, int val) {
    Node *temp = NULL;
    if (tree == NULL) return new Node(val);

    if (val < tree->data) {
        tree->left = insert(tree->left, val);
    } else if (val > tree->data) {
        tree->right = insert(tree->right, val);
    }

    return tree;
}
class Solution{
public:
    int maxDifferenceBST(Node *root,int target){
        // Code here
        Node* temp = root;
        int rootToTargetSum = 0;
        int targetToLeafSum = 0;
        while(temp != NULL){
            if(temp->data == target) break;
            rootToTargetSum += temp->data;
            if(temp->data > target) temp = temp->left;
            else temp = temp->right;
        }
        if(temp == NULL) return -1;
        targetToLeafSum = findMin(temp);
        return rootToTargetSum - targetToLeafSum;
    }
    int findMin(Node *root){
        if(root->left == NULL && root->right == NULL) return 0;
        int left = INT_MAX;
        if(root->left){
            left = root->left->data + findMin(root->left);
        }
        int right = INT_MAX;
        if(root->right){
            right = root->right->data + findMin(root->right);
        }
        return min(left, right);
    }
};
int main() {
    int T;
    cin >> T;
    while (T--) {
        Node *root = NULL;

        int N;
        cin >> N;
        for (int i = 0; i < N; i++) {
            int k;
            cin >> k;
            root = insert(root, k);
        }

        int target;
        cin >> target;
        Solution ob;
        cout << ob.maxDifferenceBST(root, target);
        cout << endl;
    }
}
