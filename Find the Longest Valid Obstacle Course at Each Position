//Leetcode -- 1964 -- Hard
//C++ Code Below
class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<int> ans(n, 0), lis;
        for(int i=0; i<n; i++){
            int index = upper_bound(lis.begin(), lis.end(), obstacles[i]) - lis.begin();
            if(index == lis.size()) lis.push_back(obstacles[i]);
            else lis[index] = obstacles[i];
            ans[i] = index + 1;
        }
        return ans;
    }
};

//Java Code Below
class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length, lisLength = 0;
        int[] ans = new int[n], lis = new int[n];
        for(int i=0; i<n; i++){
            int index = upper_bound(lis, obstacles[i], lisLength);
            if(index == lisLength) lisLength++;
            lis[index] = obstacles[i];
            ans[i] = index + 1;
        }
        return ans;
    }
    int upper_bound(int[] A, int target, int right){
        if(right == 0) return 0;
        int left = 0;
        while(left < right){
            int mid = (left + right)/2;
            if(A[mid] <= target) left = mid+1;
            else right = mid;
        }
        return left;
    }
}

//Python3 Code Below
class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        n = len(obstacles)
        ans = [0] * n
        lis = []
        for i, height in enumerate(obstacles):
            index = bisect.bisect_right(lis, height)
            if index == len(lis): lis.append(height)
            else: lis[index] = height
            ans[i] = index + 1
        return ans
