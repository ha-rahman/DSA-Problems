//Leetcode -- 1372 -- Medium
//C++ Code 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int pathLength = 0;
    int longestZigZag(TreeNode* root){
        dfs(root, false, 0);
        dfs(root, true, 0);
        return pathLength;
    }
    void dfs(TreeNode* node, bool goLeft, int steps){
        if(node == NULL) return;
        pathLength = max(pathLength, steps);
        if(goLeft){
            dfs(node->left, false, steps+1);
            dfs(node->right, true, 1);
        }
        else{
            dfs(node->left, false, 1);
            dfs(node->right, true, steps+1);
        }
    }
};

//Java Code Below
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int pathLength = 0;
    public int longestZigZag(TreeNode root) {
        dfs(root, false, 0);
        dfs(root, true, 0);
        return pathLength;
    }
    void dfs(TreeNode node, boolean goLeft, int steps){
        if(node == null) return;
        pathLength = Math.max(pathLength, steps);
        if(goLeft){
            dfs(node.left, false, steps+1);
            dfs(node.right, true, 1);
        }
        else{
            dfs(node.left, false, 1);
            dfs(node.right, true, steps+1);
        }
    }
}

//Python3 Code Below
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestZigZag(self, root: Optional[TreeNode]) -> int:
        self.pathLength = 0;
        def dfs(node, goLeft, steps):
            if node:
                self.pathLength = max(self.pathLength, steps)
                if goLeft:
                    dfs(node.left, False, steps+1)
                    dfs(node.right, True, 1)
                else:
                    dfs(node.left, False, 1)
                    dfs(node.right, True, steps+1)
        dfs(root, False, 0)
        dfs(root, True, 0)
        return self.pathLength
