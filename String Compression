//Leetcode -- Medium -- 543
//C++ code below
class Solution {
public:
    int compress(vector<char>& chars) {
        int n = chars.size();
        if(n == 1) return 1;
        int i=0, j=0;
        while(i < n){
            int cnt = 1;
            while(i < n-1 && chars[i] == chars[i+1]){
                cnt++;
                i++;
            }
            chars[j++] = chars[i++];
            if(cnt > 1){
                string cntStr = to_string(cnt);
                for(int c : cntStr) chars[j++] = c;
            }
        }
        return j;
    }
};

//java code below
class Solution {
    public int compress(char[] chars) {
        int n = chars.length;
        if(n == 1) return 1;
        int i=0, j=0;
        while(i < n){
            int cnt = 1;
            while(i < n-1 && chars[i] == chars[i+1]){
                cnt++;
                i++;
            }
            chars[j++] = chars[i++];
            if(cnt > 1){
                String cntStr = String.valueOf(cnt);
                for(int k=0; k<cntStr.length(); k++) chars[j++] = cntStr.charAt(k);
            }
        }
        return j;
    }
}

//Python3 Code Below
class Solution:
    def compress(self, chars: List[str]) -> int:
        n = len(chars)
        if n==1: return 1
        i, j = 0, 0
        while i < n:
            cnt = 1
            while i < n-1 and chars[i] == chars[i+1]:
                cnt += 1
                i += 1
            chars[j] = chars[i]
            j += 1
            i += 1
            if cnt > 1:
                for c in str(cnt):
                    chars[j] = c
                    j += 1
        return j
