//Leetcode -- 54 -- Medium
//C++ Code Below
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        int r1 = 0, r2 = matrix.size()-1;
        int c1 = 0, c2 = matrix[0].size()-1;
        while(r1<=r2 && c1<=c2){
            for(int c=c1; c<=c2; c++){
                ans.push_back(matrix[r1][c]);
            }
            for(int r = r1+1; r<=r2; r++){
                ans.push_back(matrix[r][c2]);
            }
            if(r1<r2 && c1<c2){
                for(int c=c2-1; c>c1; c--){
                    ans.push_back(matrix[r2][c]);
                }
                for(int r=r2; r>r1; r--){
                    ans.push_back(matrix[r][c1]);
                }
            }
            r1++;
            r2--;
            c1++;
            c2--;
        }
        return ans;
    }
};

//Java Code Below
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> ans = new ArrayList<>();
        int r1 = 0, r2 = matrix.length-1;
        int c1 = 0, c2 = matrix[0].length-1;
        while(r1<=r2 && c1<=c2){
            for(int c=c1; c<=c2; c++){
                ans.add(matrix[r1][c]);
            }
            for(int r = r1+1; r<=r2; r++){
                ans.add(matrix[r][c2]);
            }
            if(r1<r2 && c1<c2){
                for(int c=c2-1; c>c1; c--){
                    ans.add(matrix[r2][c]);
                }
                for(int r=r2; r>r1; r--){
                    ans.add(matrix[r][c1]);
                }
            }
            r1++;
            r2--;
            c1++;
            c2--;
        }
        return ans;
    }
}

//Python3 Code Below
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        ans = []
        r1, r2 = 0, len(matrix)-1
        c1, c2 = 0, len(matrix[0])-1
        while(r1<=r2 and c1<=c2):
            for c in range(c1, c2+1):
                ans.append(matrix[r1][c])
            for r in range(r1+1, r2+1):
                ans.append(matrix[r][c2])
            if(r1<r2 and c1<c2):
                for c in range(c2-1, c1, -1):
                    ans.append(matrix[r2][c])
                for r in range(r2, r1, -1):
                    ans.append(matrix[r][c1])
            r1 += 1
            r2 -= 1
            c1 += 1
            c2 -= 1
        return ans
